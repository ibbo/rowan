Chat Persistence Architecture
═══════════════════════════════════════════════════════════════════

┌─────────────────────────────────────────────────────────────────┐
│                         USER'S BROWSER                          │
├─────────────────────────────────────────────────────────────────┤
│                                                                 │
│  ┌──────────────────────────────────────────────────────────┐  │
│  │              localStorage                                │  │
│  │  Key: chatSCD_sessionId                                  │  │
│  │  Value: "550e8400-e29b-41d4-a716-446655440000"          │  │
│  └──────────────────────────────────────────────────────────┘  │
│                           ↓                                     │
│  ┌──────────────────────────────────────────────────────────┐  │
│  │              Chat Interface (index.html)                 │  │
│  │                                                          │  │
│  │  • Load session_id from localStorage on page load       │  │
│  │  • Fetch chat history via GET /api/history/{id}         │  │
│  │  • Display previous messages                            │  │
│  │  • Send new messages with session_id                    │  │
│  │  • Clear chat via DELETE /api/history/{id}              │  │
│  └──────────────────────────────────────────────────────────┘  │
│                                                                 │
└─────────────────────────────────────────────────────────────────┘
                              ↕ HTTP/SSE
┌─────────────────────────────────────────────────────────────────┐
│                      FASTAPI SERVER (web_app.py)                │
├─────────────────────────────────────────────────────────────────┤
│                                                                 │
│  ┌──────────────────────────────────────────────────────────┐  │
│  │                   API Endpoints                          │  │
│  │                                                          │  │
│  │  POST /api/query                                         │  │
│  │    • Receive message + session_id                       │  │
│  │    • Save user message to DB                            │  │
│  │    • Stream agent response via SSE                      │  │
│  │    • Save assistant response to DB                      │  │
│  │                                                          │  │
│  │  GET /api/history/{session_id}                          │  │
│  │    • Retrieve all messages for session                  │  │
│  │    • Return as JSON array                               │  │
│  │                                                          │  │
│  │  DELETE /api/history/{session_id}                       │  │
│  │    • Clear all messages for session                     │  │
│  │    • Delete session record                              │  │
│  └──────────────────────────────────────────────────────────┘  │
│                           ↕                                     │
│  ┌──────────────────────────────────────────────────────────┐  │
│  │              Database Functions                          │  │
│  │                                                          │  │
│  │  init_chat_db()                                          │  │
│  │    • Create tables if not exist                         │  │
│  │    • Create indexes                                     │  │
│  │                                                          │  │
│  │  save_message(session_id, role, content)                │  │
│  │    • Insert message into DB                             │  │
│  │    • Update session last_active                         │  │
│  │                                                          │  │
│  │  get_chat_history(session_id, limit=100)                │  │
│  │    • Query messages for session                         │  │
│  │    • Return ordered by timestamp                        │  │
│  │                                                          │  │
│  │  clear_chat_history(session_id)                         │  │
│  │    • Delete all messages                                │  │
│  │    • Delete session record                              │  │
│  └──────────────────────────────────────────────────────────┘  │
│                           ↕                                     │
└─────────────────────────────────────────────────────────────────┘
                              ↕
┌─────────────────────────────────────────────────────────────────┐
│                  SQLite Database (data/chat_history.db)         │
├─────────────────────────────────────────────────────────────────┤
│                                                                 │
│  ┌──────────────────────────────────────────────────────────┐  │
│  │  sessions                                                │  │
│  │  ┌────────────┬──────────────┬──────────────┐          │  │
│  │  │ session_id │ created_at   │ last_active  │          │  │
│  │  ├────────────┼──────────────┼──────────────┤          │  │
│  │  │ uuid-1     │ 2025-09-30   │ 2025-09-30   │          │  │
│  │  │ uuid-2     │ 2025-09-29   │ 2025-09-30   │          │  │
│  │  └────────────┴──────────────┴──────────────┘          │  │
│  └──────────────────────────────────────────────────────────┘  │
│                                                                 │
│  ┌──────────────────────────────────────────────────────────┐  │
│  │  messages                                                │  │
│  │  ┌────┬────────────┬──────────┬─────────┬────────────┐  │  │
│  │  │ id │ session_id │   role   │ content │ timestamp  │  │  │
│  │  ├────┼────────────┼──────────┼─────────┼────────────┤  │  │
│  │  │ 1  │ uuid-1     │ user     │ Find... │ 21:15:00   │  │  │
│  │  │ 2  │ uuid-1     │ assistant│ Here... │ 21:15:05   │  │  │
│  │  │ 3  │ uuid-2     │ user     │ What... │ 20:30:00   │  │  │
│  │  └────┴────────────┴──────────┴─────────┴────────────┘  │  │
│  └──────────────────────────────────────────────────────────┘  │
│                                                                 │
└─────────────────────────────────────────────────────────────────┘
                              ↕
┌─────────────────────────────────────────────────────────────────┐
│                    LangGraph Agent (scd_agent.py)               │
├─────────────────────────────────────────────────────────────────┤
│                                                                 │
│  • Receives config with thread_id = session_id                 │
│  • Uses MemorySaver checkpointer for conversation context      │
│  • Maintains conversation memory per session                   │
│  • Can reference previous messages in conversation             │
│                                                                 │
└─────────────────────────────────────────────────────────────────┘


User Journey Flow
═════════════════════════════════════════════════════════════════

First Visit:
───────────
1. User opens web app
2. JavaScript checks localStorage for session_id → Not found
3. Generate new UUID, save to localStorage
4. Show welcome message
5. User starts chatting

Return Visit:
────────────
1. User opens web app
2. JavaScript checks localStorage for session_id → Found!
3. Fetch GET /api/history/{session_id}
4. Load and display previous messages
5. User continues conversation

Sending Message:
───────────────
1. User types message and clicks Send
2. POST /api/query with {message, session_id}
3. Backend saves user message to DB
4. Agent processes query (with session_id as thread_id)
5. Backend streams response via SSE
6. Backend saves assistant response to DB
7. Frontend displays response

Clearing Chat:
─────────────
1. User clicks "🗑️ Clear Chat"
2. Confirmation dialog appears
3. If confirmed:
   - DELETE /api/history/{session_id}
   - Generate new UUID
   - Save new UUID to localStorage
   - Clear UI and show welcome message


Data Flow Example
═════════════════════════════════════════════════════════════════

User Message: "Find me some 32-bar reels"
Session ID: "abc-123-def"

1. Browser → Server:
   POST /api/query
   {
     "message": "Find me some 32-bar reels",
     "session_id": "abc-123-def"
   }

2. Server → Database:
   INSERT INTO messages VALUES (
     session_id: "abc-123-def",
     role: "user",
     content: "Find me some 32-bar reels",
     timestamp: "2025-09-30 21:15:00"
   )

3. Server → LangGraph:
   config = {"configurable": {"thread_id": "abc-123-def"}}
   agent.graph.astream({...}, config)

4. LangGraph → Server:
   Streams agent response chunks

5. Server → Database:
   INSERT INTO messages VALUES (
     session_id: "abc-123-def",
     role: "assistant",
     content: "Here are some 32-bar reels: ...",
     timestamp: "2025-09-30 21:15:05"
   )

6. Server → Browser:
   SSE stream with response chunks

7. Browser → localStorage:
   Keeps session_id for next visit
